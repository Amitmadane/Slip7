#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#define MAX_PROCESSES 10
typedef struct {
    int id;
    int arrivalTime;
    int burstTime;
    int waitingTime;
    int turnaroundTime;
    int completionTime;
} Process;
void calculateTimes(Process processes[], int n) {
    int totalWaitingTime = 0;
    int totalTurnaroundTime = 0;
    for (int i = 0; i < n; i++) {
        if (i == 0) {
            processes[i].completionTime = processes[i].arrivalTime + processes[i].burstTime + 2;
        } else {
            processes[i].completionTime = processes[i - 1].completionTime + processes[i].burstTime + 2; 
        }
        processes[i].turnaroundTime = processes[i].completionTime - processes[i].arrivalTime;
        processes[i].waitingTime = processes[i].turnaroundTime - processes[i].burstTime;
        totalWaitingTime += processes[i].waitingTime;
        totalTurnaroundTime += processes[i].turnaroundTime;
    }
    printf("\nAverage Waiting Time: %.2f\n", (float)totalWaitingTime / n);
    printf("Average Turnaround Time: %.2f\n", (float)totalTurnaroundTime / n);
}
void printGanttChart(Process processes[], int n) {
    printf("\nGantt Chart:\n");
    printf(" |");
    for (int i = 0; i < n; i++) {
        printf(" P%d |", processes[i].id);
    }
    printf("\n");
    printf("0");
    for (int i = 0; i < n; i++) {
        printf("   %d", processes[i].completionTime);
    }
    printf("\n");
}
int main() {
    int n; 
    Process processes[MAX_PROCESSES];
    srand(time(NULL));
    printf("Enter the number of processes (max %d): ", MAX_PROCESSES);
    scanf("%d", &n);
    if (n > MAX_PROCESSES) {
        printf("Error: Maximum number of processes exceeded.\n");
        return 1;
    }
    for (int i = 0; i < n; i++) {
        processes[i].id = i + 1;
        printf("Enter arrival time and first CPU burst for Process P%d: ", i + 1);
        scanf("%d %d", &processes[i].arrivalTime, &processes[i].burstTime);
    }
    calculateTimes(processes, n);
    printGanttChart(processes, n);
    printf("\nProcess Details:\n");
    printf("ID\tArrival\tBurst\tWaiting\tTurnaround\tCompletion\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t%d\t%d\t%d\t%d\n", processes[i].id, processes[i].arrivalTime,
               processes[i].burstTime, processes[i].waitingTime, processes[i].turnaroundTime,
               processes[i].completionTime);
    }
    return 0;
}
